{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Driver LIB.","text":"<p><code>DriverLIB</code> - a package that allows you to control different instruments.</p> <p>This is alpha version that is going to be updated.</p>"},{"location":"#install","title":"Install","text":"<p><code>pip install driverlib</code></p> <p>For more installation details, please refer to the How to install</p>"},{"location":"#how-to-use","title":"How to use","text":"<p>For further insight, please refer to the First Steps guide</p>"},{"location":"about/","title":"About DriverLib","text":""},{"location":"develop/","title":"Developer guidelines","text":""},{"location":"instruments/","title":"Index","text":"<p>This is list of all instruments supported by this library. Some instruments have interface closer to other, so there is probably more.</p>"},{"location":"instruments/#agilent","title":"Agilent","text":"<ul> <li>Agilent Signal Analyzer</li> </ul>"},{"location":"instruments/#anapico","title":"AnaPico","text":"<ul> <li>AnaPico source</li> </ul>"},{"location":"instruments/#keysight","title":"Keysight","text":"<ul> <li>Keysight Network Analyzer</li> </ul>"},{"location":"instruments/#rhodeschwarz","title":"Rhode&amp;Schwarz","text":"<ul> <li>Rhode&amp;Schwarz Source</li> </ul>"},{"location":"instruments/#yokogawa","title":"Yokogawa","text":"<ul> <li>Yokogawa GS200</li> </ul>"},{"location":"instruments/#tektronix","title":"Tektronix","text":"<ul> <li>Arbitrary Waveform Generator</li> </ul>"},{"location":"instruments/agilent_sa/","title":"Agilent Signal Analyzer","text":"<p>               Bases: <code>VisaDriver</code></p> <p>A driver for controlling Agilent Spectrum Analyzers via the VISA interface.</p> <p>This class provides methods to control and query Agilent Spectrum Analyzers, including setting and querying frequency span, center frequency, resolution bandwidth (RBW), video bandwidth (VBW), sweep time, and data format. It also includes methods to retrieve calculated data, trace data, and maximum point data.</p>"},{"location":"instruments/agilent_sa/#driverlib.agilent.agilent_sa.AgilentSA--usage","title":"Usage","text":"<pre><code>from driverlib.agilent import AgilentSA\n\nagilent_sa = AgilentSA(\"TCPIP0::123.456.789.012::inst0::INSTR\")\n\nfreqs, data = agilent_sa.get_calc_data()\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>resource_location</code> <code>str</code> <p>The VISA resource name used to connect to the device.</p> required <p>Initialize the AgilentSA object with the specified resource location.</p> <p>The constructor configures the communication termination character as a newline character.</p> <p>Parameters:</p> Name Type Description Default <code>resource_location</code> <code>str</code> <p>The VISA resource name used to connect to the device.</p> required Source code in <code>driverlib/agilent/agilent_sa.py</code> <pre><code>def __init__(self, resource_location: str):\n    \"\"\"Initialize the AgilentSA object with the specified resource location.\n\n    The constructor configures the communication termination character as a newline character.\n\n    Args:\n        resource_location (str): The VISA resource name used to connect to the device.\n    \"\"\"\n    super().__init__(resource_location, \"\\n\")\n</code></pre>"},{"location":"instruments/agilent_sa/#driverlib.agilent.agilent_sa.AgilentSA.idn","title":"idn  <code>property</code>","text":"<pre><code>idn\n</code></pre> <p>Retrieve the identification string.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The identification string of the device.</p>"},{"location":"instruments/agilent_sa/#driverlib.agilent.agilent_sa.AgilentSA.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Close the connection to the device.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def close(self):\n    \"\"\"Close the connection to the device.\"\"\"\n    self.rm.close()\n</code></pre>"},{"location":"instruments/agilent_sa/#driverlib.agilent.agilent_sa.AgilentSA.get_error","title":"get_error","text":"<pre><code>get_error()\n</code></pre> <p>Retrieve the error message from the device.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The error message.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def get_error(self):\n    \"\"\"Retrieve the error message from the device.\n\n    Returns:\n        str: The error message.\n    \"\"\"\n    return self.ask(\"SYST:ERR?\")\n</code></pre>"},{"location":"instruments/agilent_sa/#driverlib.agilent.agilent_sa.AgilentSA.print_error","title":"print_error","text":"<pre><code>print_error()\n</code></pre> <p>Print eventual errors occurred.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def print_error(self):\n    \"\"\"Print eventual errors occurred.\"\"\"\n    print(f\"Errors: {self.get_error()}\", end=\"\")\n</code></pre>"},{"location":"instruments/agilent_sa/#driverlib.agilent.agilent_sa.AgilentSA.reset","title":"reset","text":"<pre><code>reset()\n</code></pre> <p>Reset instrument to factory default state. Does not clear volatile memory.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def reset(self):\n    \"\"\"Reset instrument to factory default state. Does not clear volatile memory.\"\"\"\n    self.write(\"*RST\")\n    self.write(\"*WAI\")\n</code></pre>"},{"location":"instruments/agilent_sa/#driverlib.agilent.agilent_sa.AgilentSA.clear","title":"clear","text":"<pre><code>clear()\n</code></pre> <p>Clear event register, error queue -when power is cycled-.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def clear(self):\n    \"\"\"Clear event register, error queue -when power is cycled-.\"\"\"\n    self.write(\"*CLS\")\n    self.write(\"*WAI\")\n</code></pre>"},{"location":"instruments/agilent_sa/#driverlib.agilent.agilent_sa.AgilentSA.lookup_resources","title":"lookup_resources","text":"<pre><code>lookup_resources()\n</code></pre> <p>Look for all the available resources.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def lookup_resources(self):\n    \"\"\"Look for all the available resources.\"\"\"\n    instruments = self.rm.list_resources()\n    print(f\"Found {len(instruments)} instruments:\")\n    for location in instruments:\n        try:\n            with OpenResource(self.rm, location, self.endline) as instr:\n                idn = instr.query(\"*IDN?\")\n        except VisaIOError:\n            idn = None\n\n        print(f\"Resource named: {idn if idn else 'Unable to determine'} @ '{location}'\")\n</code></pre>"},{"location":"instruments/agilent_sa/#driverlib.agilent.agilent_sa.AgilentSA.get_span","title":"get_span","text":"<pre><code>get_span()\n</code></pre> <p>Query the frequency span of the spectrum analyzer.</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The frequency span in Hz.</p> Source code in <code>driverlib/agilent/agilent_sa.py</code> <pre><code>def get_span(self) -&gt; float:\n    \"\"\"Query the frequency span of the spectrum analyzer.\n\n    Returns:\n        float: The frequency span in Hz.\n    \"\"\"\n    return float(self.ask(\":FREQuency:SPAN?\"))\n</code></pre>"},{"location":"instruments/agilent_sa/#driverlib.agilent.agilent_sa.AgilentSA.set_span","title":"set_span","text":"<pre><code>set_span(value)\n</code></pre> <p>Set the frequency span of the spectrum analyzer.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The desired frequency span in Hz.</p> required Source code in <code>driverlib/agilent/agilent_sa.py</code> <pre><code>def set_span(self, value: float):\n    \"\"\"Set the frequency span of the spectrum analyzer.\n\n    Args:\n        value (float): The desired frequency span in Hz.\n    \"\"\"\n    self.write(f\":FREQuency:SPAN {value}\")\n</code></pre>"},{"location":"instruments/agilent_sa/#driverlib.agilent.agilent_sa.AgilentSA.get_center","title":"get_center","text":"<pre><code>get_center()\n</code></pre> <p>Query the center frequency of the spectrum analyzer.</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The center frequency in Hz.</p> Source code in <code>driverlib/agilent/agilent_sa.py</code> <pre><code>def get_center(self) -&gt; float:\n    \"\"\"Query the center frequency of the spectrum analyzer.\n\n    Returns:\n        float: The center frequency in Hz.\n    \"\"\"\n    return float(self.ask(\":FREQuency:CENTer?\"))\n</code></pre>"},{"location":"instruments/agilent_sa/#driverlib.agilent.agilent_sa.AgilentSA.set_center","title":"set_center","text":"<pre><code>set_center(value)\n</code></pre> <p>Set the center frequency of the spectrum analyzer.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The desired center frequency in Hz.</p> required Source code in <code>driverlib/agilent/agilent_sa.py</code> <pre><code>def set_center(self, value: float):\n    \"\"\"Set the center frequency of the spectrum analyzer.\n\n    Args:\n        value (float): The desired center frequency in Hz.\n    \"\"\"\n    self.write(f\":FREQuency:CENTer {value}\")\n</code></pre>"},{"location":"instruments/agilent_sa/#driverlib.agilent.agilent_sa.AgilentSA.get_rbw","title":"get_rbw","text":"<pre><code>get_rbw()\n</code></pre> <p>Query the resolution bandwidth (RBW) of the spectrum analyzer.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The RBW in Hz.</p> Source code in <code>driverlib/agilent/agilent_sa.py</code> <pre><code>def get_rbw(self) -&gt; int:\n    \"\"\"Query the resolution bandwidth (RBW) of the spectrum analyzer.\n\n    Returns:\n        int: The RBW in Hz.\n    \"\"\"\n    return int(float(self.ask(\":BANDwidth:RESolution?\")))\n</code></pre>"},{"location":"instruments/agilent_sa/#driverlib.agilent.agilent_sa.AgilentSA.set_rbw","title":"set_rbw","text":"<pre><code>set_rbw(value)\n</code></pre> <p>Set the resolution bandwidth (RBW) of the spectrum analyzer.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The desired RBW in Hz.</p> required Source code in <code>driverlib/agilent/agilent_sa.py</code> <pre><code>def set_rbw(self, value: int):\n    \"\"\"Set the resolution bandwidth (RBW) of the spectrum analyzer.\n\n    Args:\n        value (int): The desired RBW in Hz.\n    \"\"\"\n    self.write(f\":BANDwidth:RESolution {int(value)}\")\n</code></pre>"},{"location":"instruments/agilent_sa/#driverlib.agilent.agilent_sa.AgilentSA.get_vbw","title":"get_vbw","text":"<pre><code>get_vbw()\n</code></pre> <p>Query the video bandwidth (VBW) of the spectrum analyzer.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The VBW in Hz.</p> Source code in <code>driverlib/agilent/agilent_sa.py</code> <pre><code>def get_vbw(self) -&gt; int:\n    \"\"\"Query the video bandwidth (VBW) of the spectrum analyzer.\n\n    Returns:\n        int: The VBW in Hz.\n    \"\"\"\n    return int(float(self.ask(\":BANDwidth:VIDeo?\")))\n</code></pre>"},{"location":"instruments/agilent_sa/#driverlib.agilent.agilent_sa.AgilentSA.set_vbw","title":"set_vbw","text":"<pre><code>set_vbw(value)\n</code></pre> <p>Set the video bandwidth (VBW) of the spectrum analyzer.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The desired VBW in Hz.</p> required Source code in <code>driverlib/agilent/agilent_sa.py</code> <pre><code>def set_vbw(self, value: int):\n    \"\"\"Set the video bandwidth (VBW) of the spectrum analyzer.\n\n    Args:\n        value (int): The desired VBW in Hz.\n    \"\"\"\n    self.write(f\":BANDwidth:VIDeo {int(value)}\")\n</code></pre>"},{"location":"instruments/agilent_sa/#driverlib.agilent.agilent_sa.AgilentSA.get_sweep_time","title":"get_sweep_time","text":"<pre><code>get_sweep_time()\n</code></pre> <p>Query the sweep time of the spectrum analyzer.</p> <p>Returns:</p> Type Description <code>Optional[float]</code> <p>Optional[float]: The sweep time in seconds, or None if set to auto.</p> Source code in <code>driverlib/agilent/agilent_sa.py</code> <pre><code>def get_sweep_time(self) -&gt; Optional[float]:\n    \"\"\"Query the sweep time of the spectrum analyzer.\n\n    Returns:\n        Optional[float]: The sweep time in seconds, or None if set to auto.\n    \"\"\"\n    sweep_time = self.ask(\":SENSe:SWEep:TIME?\")\n    if sweep_time.lower() == \"auto\":\n        return None\n    return float(sweep_time)\n</code></pre>"},{"location":"instruments/agilent_sa/#driverlib.agilent.agilent_sa.AgilentSA.set_sweep_time","title":"set_sweep_time","text":"<pre><code>set_sweep_time(value)\n</code></pre> <p>Set the sweep time of the spectrum analyzer.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Optional[float]</code> <p>The desired sweep time in seconds, or None to set to auto.</p> required Source code in <code>driverlib/agilent/agilent_sa.py</code> <pre><code>def set_sweep_time(self, value: Optional[float]):\n    \"\"\"Set the sweep time of the spectrum analyzer.\n\n    Args:\n        value (Optional[float]): The desired sweep time in seconds, or None to set to auto.\n    \"\"\"\n    if value is None:\n        self.write(\":SENSe:SWEep:TIME:AUTO ON\")\n    else:\n        self.write(f\":SENSe:SWEep:TIME {value}\")  # time in seconds\n</code></pre>"},{"location":"instruments/agilent_sa/#driverlib.agilent.agilent_sa.AgilentSA.get_data_format","title":"get_data_format","text":"<pre><code>get_data_format()\n</code></pre> <p>Query the data format for trace data from the spectrum analyzer.</p> <p>Returns:</p> Name Type Description <code>_FORMATS_TYPE</code> <code>_FORMATS_TYPE</code> <p>The current data format.</p> Source code in <code>driverlib/agilent/agilent_sa.py</code> <pre><code>def get_data_format(self) -&gt; _FORMATS_TYPE:\n    \"\"\"Query the data format for trace data from the spectrum analyzer.\n\n    Returns:\n        _FORMATS_TYPE: The current data format.\n    \"\"\"\n    return self.ask(\":FORMat:TRACe:DATA?\")  # type: ignore\n</code></pre>"},{"location":"instruments/agilent_sa/#driverlib.agilent.agilent_sa.AgilentSA.set_data_format","title":"set_data_format","text":"<pre><code>set_data_format(value='ASCii')\n</code></pre> <p>Set the data format for trace data from the spectrum analyzer.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>_FORMATS_TYPE</code> <p>The desired data format.</p> <code>'ASCii'</code> Source code in <code>driverlib/agilent/agilent_sa.py</code> <pre><code>def set_data_format(self, value: _FORMATS_TYPE = \"ASCii\"):\n    \"\"\"Set the data format for trace data from the spectrum analyzer.\n\n    Args:\n        value (_FORMATS_TYPE): The desired data format.\n    \"\"\"\n    self.write(f\":FORMat:TRACe:DATA {value}\")\n</code></pre>"},{"location":"instruments/agilent_sa/#driverlib.agilent.agilent_sa.AgilentSA.get_calc_data","title":"get_calc_data","text":"<pre><code>get_calc_data()\n</code></pre> <p>Retrieve the calculated data from the spectrum analyzer.</p> <p>Returns:</p> Type Description <code>Tuple[ndarray, ndarray]</code> <p>Tuple[np.ndarray, np.ndarray]: The frequencies and amplitude as np.arrays.</p> Source code in <code>driverlib/agilent/agilent_sa.py</code> <pre><code>def get_calc_data(self) -&gt; Tuple[np.ndarray, np.ndarray]:\n    \"\"\"Retrieve the calculated data from the spectrum analyzer.\n\n    Returns:\n        Tuple[np.ndarray, np.ndarray]: The frequencies and amplitude as np.arrays.\n    \"\"\"\n    d = self.ask(\":CALCulate:DATA?\")\n    d = [float(f) for f in d.split(\",\")]\n    d = np.array(d)\n    x = d[::2]\n    y = d[1::2]\n    return x, y\n</code></pre>"},{"location":"instruments/agilent_sa/#driverlib.agilent.agilent_sa.AgilentSA.get_trace","title":"get_trace","text":"<pre><code>get_trace(trace=1)\n</code></pre> <p>Retrieve the trace data for a specified trace number from the spectrum analyzer.</p> <p>Parameters:</p> Name Type Description Default <code>trace</code> <code>int</code> <p>The trace number. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Type Description <p>np.ndarray: The trace data as a numpy array.</p> Source code in <code>driverlib/agilent/agilent_sa.py</code> <pre><code>def get_trace(self, trace: int = 1):\n    \"\"\"Retrieve the trace data for a specified trace number from the spectrum analyzer.\n\n    Args:\n        trace (int, optional): The trace number. Defaults to 1.\n\n    Returns:\n        np.ndarray: The trace data as a numpy array.\n    \"\"\"\n    raw = self.ask(f\":TRACe:DATA? TRACE{trace}\")\n    return np.asarray([float(f) for f in raw.split(\",\")])\n</code></pre>"},{"location":"instruments/agilent_sa/#driverlib.agilent.agilent_sa.AgilentSA.get_freq_and_trace","title":"get_freq_and_trace","text":"<pre><code>get_freq_and_trace(trace=1, center=None, span=None)\n</code></pre> <p>Retrieves the trace data and corresponding frequency points from the spectrum analyzer.</p> <p>This method allows specifying a trace number, and optionally the center frequency and span to use for frequency calculations. If the center frequency and span are not provided, the current settings of the spectrum analyzer are used.</p> <p>Parameters:</p> Name Type Description Default <code>trace</code> <code>int</code> <p>The trace number to retrieve data from. Defaults to 1.</p> <code>1</code> <code>center</code> <code>Optional[float]</code> <p>The center frequency in Hz. If None, the current center frequency of the spectrum analyzer is used. Defaults to None.</p> <code>None</code> <code>span</code> <code>Optional[float]</code> <p>The frequency span in Hz. If None, the current span of the spectrum analyzer is used. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Tuple[ndarray, ndarray]</code> <p>Tuple[np.ndarray, np.ndarray]: A tuple containing two numpy arrays. The first array contains the trace data points, and the second contains the corresponding frequency points in Hz.</p> Source code in <code>driverlib/agilent/agilent_sa.py</code> <pre><code>def get_freq_and_trace(\n    self,\n    trace: int = 1,\n    center: Optional[float] = None,\n    span: Optional[float] = None,\n) -&gt; Tuple[np.ndarray, np.ndarray]:\n    \"\"\"\n    Retrieves the trace data and corresponding frequency points from the spectrum analyzer.\n\n    This method allows specifying a trace number, and optionally the center frequency and span\n    to use for frequency calculations. If the center frequency and span are not provided,\n    the current settings of the spectrum analyzer are used.\n\n    Args:\n        trace (int): The trace number to retrieve data from. Defaults to 1.\n        center (Optional[float]): The center frequency in Hz. If None, the current center\n            frequency of the spectrum analyzer is used. Defaults to None.\n        span (Optional[float]): The frequency span in Hz. If None, the current span of the\n            spectrum analyzer is used. Defaults to None.\n\n    Returns:\n        Tuple[np.ndarray, np.ndarray]: A tuple containing two numpy arrays. The first array\n            contains the trace data points, and the second contains the corresponding\n            frequency points in Hz.\n    \"\"\"\n    # Get the current center frequency and span if not provided\n    if span is None:\n        span = self.get_span()\n    if center is None:\n        center = self.get_center()\n\n    # Ensure the data format is set to ASCII.\n    self.set_data_format(\"ASCii\")\n\n    # Retrieve the trace data from the specified trace number\n    data = self.get_trace(trace=trace)\n\n    # Calculate the frequency points corresponding to each data point in the trace\n    freqs = np.linspace(center - span / 2, center + span / 2, len(data))\n\n    return freqs, data\n</code></pre>"},{"location":"instruments/agilent_sa/#driverlib.agilent.agilent_sa.AgilentSA.get_max_point","title":"get_max_point","text":"<pre><code>get_max_point(marker=1)\n</code></pre> <p>Find the maximum point on the specified marker and returns its frequency.</p> <p>Parameters:</p> Name Type Description Default <code>marker</code> <code>int</code> <p>The marker number. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The frequency of the maximum point in Hz.</p> Source code in <code>driverlib/agilent/agilent_sa.py</code> <pre><code>def get_max_point(self, marker: int = 1) -&gt; float:\n    \"\"\"Find the maximum point on the specified marker and returns its frequency.\n\n    Args:\n        marker (int, optional): The marker number. Defaults to 1.\n\n    Returns:\n        float: The frequency of the maximum point in Hz.\n    \"\"\"\n    self.write(f\":CALCulate:MARKer{marker}:MAXimum\")\n    return float(self.ask(f\":CALCulate:MARKer{marker}:X?\"))\n</code></pre>"},{"location":"instruments/agilent_sa/#driverlib.agilent.agilent_sa.AgilentSA.set_trace_parameters_and_get","title":"set_trace_parameters_and_get","text":"<pre><code>set_trace_parameters_and_get(center, span, rbw=100, vbw=30, swt=None)\n</code></pre> <p>Configure and measure.</p> <p>This method sets the center frequency, span, resolution bandwidth (RBW), video bandwidth     (VBW), and sweep time for the spectrum analyzer. It then retrieves the trace data     displayed on the screen along with the corresponding frequency values.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>float</code> <p>Center frequency in Hz.</p> required <code>span</code> <code>float</code> <p>Frequency span in Hz.</p> required <code>rbw</code> <code>int</code> <p>Resolution bandwidth in Hz. Defaults to 100.</p> <code>100</code> <code>vbw</code> <code>int</code> <p>Video bandwidth in Hz. Defaults to 30.</p> <code>30</code> <code>swt</code> <code>Optional[float]</code> <p>Total sweep time in seconds. None for auto. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>Tuple[np.ndarray, np.ndarray]: A tuple containing two numpy arrays. The first array</p> <code>ndarray</code> <p>contains the trace data, and the second contains the corresponding frequencies.</p> Source code in <code>driverlib/agilent/agilent_sa.py</code> <pre><code>def set_trace_parameters_and_get(\n    self, center: float, span: float, rbw: int = 100, vbw: int = 30, swt: Optional[float] = None\n) -&gt; Tuple[np.ndarray, np.ndarray]:\n    \"\"\"Configure and measure.\n\n    This method sets the center frequency, span, resolution bandwidth (RBW), video bandwidth\n        (VBW), and sweep time for the spectrum analyzer. It then retrieves the trace data\n        displayed on the screen along with the corresponding frequency values.\n\n    Args:\n        center (float): Center frequency in Hz.\n        span (float): Frequency span in Hz.\n        rbw (int): Resolution bandwidth in Hz. Defaults to 100.\n        vbw (int): Video bandwidth in Hz. Defaults to 30.\n        swt (Optional[float]): Total sweep time in seconds. None for auto. Defaults to None.\n\n    Returns:\n        Tuple[np.ndarray, np.ndarray]: A tuple containing two numpy arrays. The first array\n        contains the trace data, and the second contains the corresponding frequencies.\n    \"\"\"\n    self.center = center\n    self.span = span\n    self.rbw = rbw\n    self.vbw = vbw\n    self.sweep_time = swt\n\n    self.write(\":DISPlay:WINdow:TRACe:Y:SCALe:SPACing LOGarithmic\")\n\n    return self.get_freq_and_trace(trace=1, span=span, center=center)\n</code></pre>"},{"location":"instruments/anapico/","title":"Anapico","text":"<p>               Bases: <code>VisaDriver</code></p> <p>A driver for controlling Anapico signal generators via the VISA interface.</p> <p>This class provides methods to control and query the Anapico signal generators, including setting and querying the frequency, power, and RF state of a specified channel.</p> <p>Parameters:</p> Name Type Description Default <code>resource_location</code> <code>str</code> <p>The VISA resource name used to connect to the device.</p> required <p>Initialize the Anapico object with the specified resource location.</p> <p>The constructor configures the communication termination character as a newline character.</p> <p>Parameters:</p> Name Type Description Default <code>resource_location</code> <code>str</code> <p>The VISA resource name used to connect to the device.</p> required Source code in <code>driverlib/anapico/anapico.py</code> <pre><code>def __init__(self, resource_location: str):\n    \"\"\"Initialize the Anapico object with the specified resource location.\n\n    The constructor configures the communication termination character as a newline character.\n\n    Args:\n        resource_location (str): The VISA resource name used to connect to the device.\n    \"\"\"\n    super().__init__(resource_location, \"\\n\")\n</code></pre>"},{"location":"instruments/anapico/#driverlib.anapico.anapico.Anapico.idn","title":"idn  <code>property</code>","text":"<pre><code>idn\n</code></pre> <p>Retrieve the identification string.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The identification string of the device.</p>"},{"location":"instruments/anapico/#driverlib.anapico.anapico.Anapico.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Close the connection to the device.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def close(self):\n    \"\"\"Close the connection to the device.\"\"\"\n    self.rm.close()\n</code></pre>"},{"location":"instruments/anapico/#driverlib.anapico.anapico.Anapico.get_error","title":"get_error","text":"<pre><code>get_error()\n</code></pre> <p>Retrieve the error message from the device.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The error message.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def get_error(self):\n    \"\"\"Retrieve the error message from the device.\n\n    Returns:\n        str: The error message.\n    \"\"\"\n    return self.ask(\"SYST:ERR?\")\n</code></pre>"},{"location":"instruments/anapico/#driverlib.anapico.anapico.Anapico.print_error","title":"print_error","text":"<pre><code>print_error()\n</code></pre> <p>Print eventual errors occurred.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def print_error(self):\n    \"\"\"Print eventual errors occurred.\"\"\"\n    print(f\"Errors: {self.get_error()}\", end=\"\")\n</code></pre>"},{"location":"instruments/anapico/#driverlib.anapico.anapico.Anapico.reset","title":"reset","text":"<pre><code>reset()\n</code></pre> <p>Reset instrument to factory default state. Does not clear volatile memory.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def reset(self):\n    \"\"\"Reset instrument to factory default state. Does not clear volatile memory.\"\"\"\n    self.write(\"*RST\")\n    self.write(\"*WAI\")\n</code></pre>"},{"location":"instruments/anapico/#driverlib.anapico.anapico.Anapico.clear","title":"clear","text":"<pre><code>clear()\n</code></pre> <p>Clear event register, error queue -when power is cycled-.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def clear(self):\n    \"\"\"Clear event register, error queue -when power is cycled-.\"\"\"\n    self.write(\"*CLS\")\n    self.write(\"*WAI\")\n</code></pre>"},{"location":"instruments/anapico/#driverlib.anapico.anapico.Anapico.lookup_resources","title":"lookup_resources","text":"<pre><code>lookup_resources()\n</code></pre> <p>Look for all the available resources.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def lookup_resources(self):\n    \"\"\"Look for all the available resources.\"\"\"\n    instruments = self.rm.list_resources()\n    print(f\"Found {len(instruments)} instruments:\")\n    for location in instruments:\n        try:\n            with OpenResource(self.rm, location, self.endline) as instr:\n                idn = instr.query(\"*IDN?\")\n        except VisaIOError:\n            idn = None\n\n        print(f\"Resource named: {idn if idn else 'Unable to determine'} @ '{location}'\")\n</code></pre>"},{"location":"instruments/anapico/#driverlib.anapico.anapico.Anapico.get_frequency","title":"get_frequency","text":"<pre><code>get_frequency(channel)\n</code></pre> <p>Query the frequency of a specified channel.</p> <p>Parameters:</p> Name Type Description Default <code>channel</code> <p>The channel number.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The frequency of the specified channel in Hz.</p> Source code in <code>driverlib/anapico/anapico.py</code> <pre><code>def get_frequency(self, channel):\n    \"\"\"Query the frequency of a specified channel.\n\n    Args:\n        channel: The channel number.\n\n    Returns:\n        float: The frequency of the specified channel in Hz.\n    \"\"\"\n    return float(self.ask(f\":SOURce{int(channel)}:FREQuency:CW?\"))\n</code></pre>"},{"location":"instruments/anapico/#driverlib.anapico.anapico.Anapico.set_frequency","title":"set_frequency","text":"<pre><code>set_frequency(channel, value)\n</code></pre> <p>Set the frequency of a specified channel.</p> <p>Parameters:</p> Name Type Description Default <code>channel</code> <p>The channel number.</p> required <code>value</code> <p>The desired frequency in Hz.</p> required <p>Returns:</p> Name Type Description <code>self</code> <p>Returns the instance itself to allow for method chaining.</p> Source code in <code>driverlib/anapico/anapico.py</code> <pre><code>def set_frequency(self, channel, value):\n    \"\"\"Set the frequency of a specified channel.\n\n    Args:\n        channel: The channel number.\n        value: The desired frequency in Hz.\n\n    Returns:\n        self: Returns the instance itself to allow for method chaining.\n    \"\"\"\n    self.write(f\":SOURce{int(channel)}:FREQuency:CW {float(value)}\")\n    return self\n</code></pre>"},{"location":"instruments/anapico/#driverlib.anapico.anapico.Anapico.get_power","title":"get_power","text":"<pre><code>get_power(channel)\n</code></pre> <p>Query the power of a specified channel.</p> <p>Parameters:</p> Name Type Description Default <code>channel</code> <p>The channel number.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>The power of the specified channel in dBm.</p> Source code in <code>driverlib/anapico/anapico.py</code> <pre><code>def get_power(self, channel):\n    \"\"\"Query the power of a specified channel.\n\n    Args:\n        channel: The channel number.\n\n    Returns:\n        float: The power of the specified channel in dBm.\n    \"\"\"\n    return float(self.ask(f\":SOURce{int(channel)}:POWER?\"))\n</code></pre>"},{"location":"instruments/anapico/#driverlib.anapico.anapico.Anapico.set_power","title":"set_power","text":"<pre><code>set_power(channel, value)\n</code></pre> <p>Set the power of a specified channel.</p> <p>Parameters:</p> Name Type Description Default <code>channel</code> <p>The channel number.</p> required <code>value</code> <p>The desired power in dBm. The Anapico cannot output less than -10 dBm.</p> required <p>Returns:</p> Name Type Description <code>self</code> <p>Returns the instance itself to allow for method chaining.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the specified power value is less than -10 dBm.</p> Source code in <code>driverlib/anapico/anapico.py</code> <pre><code>def set_power(self, channel, value):\n    \"\"\"Set the power of a specified channel.\n\n    Args:\n        channel: The channel number.\n        value: The desired power in dBm. The Anapico cannot output less than -10 dBm.\n\n    Returns:\n        self: Returns the instance itself to allow for method chaining.\n\n    Raises:\n        ValueError: If the specified power value is less than -10 dBm.\n    \"\"\"\n    if value &lt; -10:\n        raise ValueError(\"Anapico cannot output less than -10 dBm\")\n    self.write(f\":SOURce{int(channel)}:POWER {float(value)}\")\n    return self\n</code></pre>"},{"location":"instruments/anapico/#driverlib.anapico.anapico.Anapico.get_rf_state","title":"get_rf_state","text":"<pre><code>get_rf_state(channel)\n</code></pre> <p>Query the RF output state of a specified channel.</p> <p>Parameters:</p> Name Type Description Default <code>channel</code> <p>The channel number.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>1 if the RF output is enabled (on), 0 if disabled (off).</p> Source code in <code>driverlib/anapico/anapico.py</code> <pre><code>def get_rf_state(self, channel):\n    \"\"\"Query the RF output state of a specified channel.\n\n    Args:\n        channel: The channel number.\n\n    Returns:\n        int: 1 if the RF output is enabled (on), 0 if disabled (off).\n    \"\"\"\n    return int(self.ask(f\"OUTPut{int(channel)}:STATE?\")[:1])\n</code></pre>"},{"location":"instruments/anapico/#driverlib.anapico.anapico.Anapico.set_rf_state","title":"set_rf_state","text":"<pre><code>set_rf_state(channel, state)\n</code></pre> <p>Sets the RF output state of a specified channel.</p> <p>Parameters:</p> Name Type Description Default <code>channel</code> <p>The channel number.</p> required <code>state</code> <p>The desired state. True to enable (on) the RF output, False to disable (off).</p> required <p>Returns:</p> Name Type Description <code>self</code> <p>Returns the instance itself to allow for method chaining.</p> Source code in <code>driverlib/anapico/anapico.py</code> <pre><code>def set_rf_state(self, channel, state):\n    \"\"\"Sets the RF output state of a specified channel.\n\n    Args:\n        channel: The channel number.\n        state: The desired state. True to enable (on) the RF output, False to disable (off).\n\n    Returns:\n        self: Returns the instance itself to allow for method chaining.\n    \"\"\"\n    if state is True:\n        state = \"ON\"\n    else:\n        state = \"OFF\"\n    self.write(f\"OUTPut{int(channel)}:STATE {state}\")\n    return self\n</code></pre>"},{"location":"instruments/keysight_na/","title":"Keysight Network Analyzer","text":"<p>               Bases: <code>VisaDriver</code></p> Source code in <code>driverlib/keysight/keysight_na.py</code> <pre><code>def __init__(self, resource_location: str):\n    super().__init__(resource_location, \"\\n\")\n</code></pre>"},{"location":"instruments/keysight_na/#driverlib.keysight.keysight_na.KeysightNA.idn","title":"idn  <code>property</code>","text":"<pre><code>idn\n</code></pre> <p>Retrieve the identification string.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The identification string of the device.</p>"},{"location":"instruments/keysight_na/#driverlib.keysight.keysight_na.KeysightNA.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Close the connection to the device.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def close(self):\n    \"\"\"Close the connection to the device.\"\"\"\n    self.rm.close()\n</code></pre>"},{"location":"instruments/keysight_na/#driverlib.keysight.keysight_na.KeysightNA.get_error","title":"get_error","text":"<pre><code>get_error()\n</code></pre> <p>Retrieve the error message from the device.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The error message.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def get_error(self):\n    \"\"\"Retrieve the error message from the device.\n\n    Returns:\n        str: The error message.\n    \"\"\"\n    return self.ask(\"SYST:ERR?\")\n</code></pre>"},{"location":"instruments/keysight_na/#driverlib.keysight.keysight_na.KeysightNA.print_error","title":"print_error","text":"<pre><code>print_error()\n</code></pre> <p>Print eventual errors occurred.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def print_error(self):\n    \"\"\"Print eventual errors occurred.\"\"\"\n    print(f\"Errors: {self.get_error()}\", end=\"\")\n</code></pre>"},{"location":"instruments/keysight_na/#driverlib.keysight.keysight_na.KeysightNA.reset","title":"reset","text":"<pre><code>reset()\n</code></pre> <p>Reset instrument to factory default state. Does not clear volatile memory.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def reset(self):\n    \"\"\"Reset instrument to factory default state. Does not clear volatile memory.\"\"\"\n    self.write(\"*RST\")\n    self.write(\"*WAI\")\n</code></pre>"},{"location":"instruments/keysight_na/#driverlib.keysight.keysight_na.KeysightNA.clear","title":"clear","text":"<pre><code>clear()\n</code></pre> <p>Clear event register, error queue -when power is cycled-.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def clear(self):\n    \"\"\"Clear event register, error queue -when power is cycled-.\"\"\"\n    self.write(\"*CLS\")\n    self.write(\"*WAI\")\n</code></pre>"},{"location":"instruments/keysight_na/#driverlib.keysight.keysight_na.KeysightNA.lookup_resources","title":"lookup_resources","text":"<pre><code>lookup_resources()\n</code></pre> <p>Look for all the available resources.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def lookup_resources(self):\n    \"\"\"Look for all the available resources.\"\"\"\n    instruments = self.rm.list_resources()\n    print(f\"Found {len(instruments)} instruments:\")\n    for location in instruments:\n        try:\n            with OpenResource(self.rm, location, self.endline) as instr:\n                idn = instr.query(\"*IDN?\")\n        except VisaIOError:\n            idn = None\n\n        print(f\"Resource named: {idn if idn else 'Unable to determine'} @ '{location}'\")\n</code></pre>"},{"location":"instruments/keysight_na/#driverlib.keysight.keysight_na.KeysightNA.get_output","title":"get_output","text":"<pre><code>get_output()\n</code></pre> <p>Query the output state of the signal generator.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the output is enabled, False otherwise.</p> Source code in <code>driverlib/keysight/keysight_na.py</code> <pre><code>def get_output(self) -&gt; bool:\n    \"\"\"Query the output state of the signal generator.\n\n    Returns:\n        bool: True if the output is enabled, False otherwise.\n    \"\"\"\n    return bool(int(self.ask(\"OUTP?\")))\n</code></pre>"},{"location":"instruments/keysight_na/#driverlib.keysight.keysight_na.KeysightNA.set_output","title":"set_output","text":"<pre><code>set_output(value)\n</code></pre> <p>Set the output state of the signal generator.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>bool | ON | OFF | 0 | 1</code> <p>The desired output state. True to enable the output, False to disable it.</p> required Source code in <code>driverlib/keysight/keysight_na.py</code> <pre><code>def set_output(self, value):\n    \"\"\"Set the output state of the signal generator.\n\n    Args:\n        value (bool | ON | OFF | 0 | 1): The desired output state. True to enable the output, False to disable it.\n    \"\"\"\n    if self._value_to_bool(value):\n        self.write(\":OUTP ON\")\n    else:\n        self.write(\":OUTP OFF\")\n</code></pre>"},{"location":"instruments/rs_source/","title":"Rhode&amp;Schwarz Source","text":"<p>               Bases: <code>VisaDriver</code></p> <p>A driver for controlling Rohde &amp; Schwarz signal generators via the VISA interface.</p> <p>This class provides methods to control and query the Rohde &amp; Schwarz signal generators, including setting and querying the output power, frequency, and output state.</p> <p>Parameters:</p> Name Type Description Default <code>resource_location</code> <code>str</code> <p>The VISA resource name used to connect to the device.</p> required <p>Initialize the RhodeSchwarzSource object with the specified resource location.</p> <p>The constructor configures the communication termination character as a newline character.</p> <p>Parameters:</p> Name Type Description Default <code>resource_location</code> <code>str</code> <p>The VISA resource name used to connect to the device.</p> required Source code in <code>driverlib/rhode_schwarz/rs_source.py</code> <pre><code>def __init__(self, resource_location: str):\n    \"\"\"Initialize the RhodeSchwarzSource object with the specified resource location.\n\n    The constructor configures the communication termination character as a newline character.\n\n    Args:\n        resource_location (str): The VISA resource name used to connect to the device.\n    \"\"\"\n    super().__init__(resource_location, \"\\n\")\n</code></pre>"},{"location":"instruments/rs_source/#driverlib.rhode_schwarz.rs_source.RhodeSchwarzSource.idn","title":"idn  <code>property</code>","text":"<pre><code>idn\n</code></pre> <p>Retrieve the identification string.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The identification string of the device.</p>"},{"location":"instruments/rs_source/#driverlib.rhode_schwarz.rs_source.RhodeSchwarzSource.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Close the connection to the device.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def close(self):\n    \"\"\"Close the connection to the device.\"\"\"\n    self.rm.close()\n</code></pre>"},{"location":"instruments/rs_source/#driverlib.rhode_schwarz.rs_source.RhodeSchwarzSource.get_error","title":"get_error","text":"<pre><code>get_error()\n</code></pre> <p>Retrieve the error message from the device.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The error message.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def get_error(self):\n    \"\"\"Retrieve the error message from the device.\n\n    Returns:\n        str: The error message.\n    \"\"\"\n    return self.ask(\"SYST:ERR?\")\n</code></pre>"},{"location":"instruments/rs_source/#driverlib.rhode_schwarz.rs_source.RhodeSchwarzSource.print_error","title":"print_error","text":"<pre><code>print_error()\n</code></pre> <p>Print eventual errors occurred.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def print_error(self):\n    \"\"\"Print eventual errors occurred.\"\"\"\n    print(f\"Errors: {self.get_error()}\", end=\"\")\n</code></pre>"},{"location":"instruments/rs_source/#driverlib.rhode_schwarz.rs_source.RhodeSchwarzSource.reset","title":"reset","text":"<pre><code>reset()\n</code></pre> <p>Reset instrument to factory default state. Does not clear volatile memory.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def reset(self):\n    \"\"\"Reset instrument to factory default state. Does not clear volatile memory.\"\"\"\n    self.write(\"*RST\")\n    self.write(\"*WAI\")\n</code></pre>"},{"location":"instruments/rs_source/#driverlib.rhode_schwarz.rs_source.RhodeSchwarzSource.clear","title":"clear","text":"<pre><code>clear()\n</code></pre> <p>Clear event register, error queue -when power is cycled-.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def clear(self):\n    \"\"\"Clear event register, error queue -when power is cycled-.\"\"\"\n    self.write(\"*CLS\")\n    self.write(\"*WAI\")\n</code></pre>"},{"location":"instruments/rs_source/#driverlib.rhode_schwarz.rs_source.RhodeSchwarzSource.lookup_resources","title":"lookup_resources","text":"<pre><code>lookup_resources()\n</code></pre> <p>Look for all the available resources.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def lookup_resources(self):\n    \"\"\"Look for all the available resources.\"\"\"\n    instruments = self.rm.list_resources()\n    print(f\"Found {len(instruments)} instruments:\")\n    for location in instruments:\n        try:\n            with OpenResource(self.rm, location, self.endline) as instr:\n                idn = instr.query(\"*IDN?\")\n        except VisaIOError:\n            idn = None\n\n        print(f\"Resource named: {idn if idn else 'Unable to determine'} @ '{location}'\")\n</code></pre>"},{"location":"instruments/rs_source/#driverlib.rhode_schwarz.rs_source.RhodeSchwarzSource.get_power","title":"get_power","text":"<pre><code>get_power()\n</code></pre> <p>Query the output power of the signal generator.</p> <p>Returns:</p> Name Type Description <code>float</code> <p>The output power in dBm.</p> Source code in <code>driverlib/rhode_schwarz/rs_source.py</code> <pre><code>def get_power(self):\n    \"\"\"Query the output power of the signal generator.\n\n    Returns:\n        float: The output power in dBm.\n    \"\"\"\n    return float(self.ask(\":POW?\"))\n</code></pre>"},{"location":"instruments/rs_source/#driverlib.rhode_schwarz.rs_source.RhodeSchwarzSource.set_power","title":"set_power","text":"<pre><code>set_power(value)\n</code></pre> <p>Set the output power of the signal generator.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The desired output power in dBm.</p> required Source code in <code>driverlib/rhode_schwarz/rs_source.py</code> <pre><code>def set_power(self, value):\n    \"\"\"Set the output power of the signal generator.\n\n    Args:\n        value (float): The desired output power in dBm.\n    \"\"\"\n    self.write(\":POW \" + str(value))\n</code></pre>"},{"location":"instruments/rs_source/#driverlib.rhode_schwarz.rs_source.RhodeSchwarzSource.get_frequency","title":"get_frequency","text":"<pre><code>get_frequency()\n</code></pre> <p>Query the frequency of the signal generator.</p> <p>Returns:</p> Name Type Description <code>float</code> <p>The frequency in Hz.</p> Source code in <code>driverlib/rhode_schwarz/rs_source.py</code> <pre><code>def get_frequency(self):\n    \"\"\"Query the frequency of the signal generator.\n\n    Returns:\n        float: The frequency in Hz.\n    \"\"\"\n    return float(self.ask(\":FREQ?\"))\n</code></pre>"},{"location":"instruments/rs_source/#driverlib.rhode_schwarz.rs_source.RhodeSchwarzSource.set_frequency","title":"set_frequency","text":"<pre><code>set_frequency(value)\n</code></pre> <p>Set the frequency of the signal generator.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The desired frequency in Hz.</p> required Source code in <code>driverlib/rhode_schwarz/rs_source.py</code> <pre><code>def set_frequency(self, value):\n    \"\"\"Set the frequency of the signal generator.\n\n    Args:\n        value (float): The desired frequency in Hz.\n    \"\"\"\n    self.write(f\":FREQ {value:.0f}\")\n</code></pre>"},{"location":"instruments/rs_source/#driverlib.rhode_schwarz.rs_source.RhodeSchwarzSource.get_output","title":"get_output","text":"<pre><code>get_output()\n</code></pre> <p>Query the output state of the signal generator.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the output is enabled, False otherwise.</p> Source code in <code>driverlib/rhode_schwarz/rs_source.py</code> <pre><code>def get_output(self) -&gt; bool:\n    \"\"\"Query the output state of the signal generator.\n\n    Returns:\n        bool: True if the output is enabled, False otherwise.\n    \"\"\"\n    return bool(int(self.ask(\"OUTP?\")))\n</code></pre>"},{"location":"instruments/rs_source/#driverlib.rhode_schwarz.rs_source.RhodeSchwarzSource.set_output","title":"set_output","text":"<pre><code>set_output(value)\n</code></pre> <p>Set the output state of the signal generator.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>bool | ON | OFF | 0 | 1</code> <p>The desired output state. True to enable the output, False to disable it.</p> required Source code in <code>driverlib/rhode_schwarz/rs_source.py</code> <pre><code>def set_output(self, value: ONOFF_TYPE):\n    \"\"\"Set the output state of the signal generator.\n\n    Args:\n        value (bool | ON | OFF | 0 | 1): The desired output state. True to enable the output, False to disable it.\n    \"\"\"\n    if self._value_to_bool(value):\n        self.write(\":OUTP ON\")\n    else:\n        self.write(\":OUTP OFF\")\n</code></pre>"},{"location":"instruments/rs_source/#driverlib.rhode_schwarz.rs_source.RhodeSchwarzSource.get_modulation","title":"get_modulation","text":"<pre><code>get_modulation()\n</code></pre> <p>Query the modulation state the signal generator.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the modulation output is enabled, False otherwise.</p> Source code in <code>driverlib/rhode_schwarz/rs_source.py</code> <pre><code>def get_modulation(self) -&gt; bool:\n    \"\"\"Query the modulation state the signal generator.\n\n    Returns:\n        bool: True if the modulation output is enabled, False otherwise.\n    \"\"\"\n    return bool(int(self.ask(\"MOD:STAT?\")))\n</code></pre>"},{"location":"instruments/rs_source/#driverlib.rhode_schwarz.rs_source.RhodeSchwarzSource.set_modulation","title":"set_modulation","text":"<pre><code>set_modulation(value)\n</code></pre> <p>Turn on or off the modulation output state of the signal generator.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>bool | ON | OFF | 0 | 1</code> <p>The desired output state. True to enable the output, False to disable it.</p> required Source code in <code>driverlib/rhode_schwarz/rs_source.py</code> <pre><code>def set_modulation(self, value: ONOFF_TYPE):\n    \"\"\"Turn on or off the modulation output state of the signal generator.\n\n    Args:\n        value (bool | ON | OFF | 0 | 1): The desired output state. True to enable the output, False to disable it.\n    \"\"\"\n    if self._value_to_bool(value):\n        self.write(\"MOD:STAT ON\")\n    else:\n        self.write(\"MOD:STAT OFF\")\n</code></pre>"},{"location":"instruments/rs_source/#driverlib.rhode_schwarz.rs_source.RhodeSchwarzSource.get_modulation_frequency","title":"get_modulation_frequency","text":"<pre><code>get_modulation_frequency()\n</code></pre> <p>Get the modulation frequency of the signal generator.</p> <p>Returns:</p> Name Type Description <code>float</code> <p>Frequency of the modulation in Hz.</p> Source code in <code>driverlib/rhode_schwarz/rs_source.py</code> <pre><code>def get_modulation_frequency(self):\n    \"\"\"Get the modulation frequency of the signal generator.\n\n    Returns:\n        float: Frequency of the modulation in Hz.\n    \"\"\"\n    return float(self.ask(\"LFO1:FREQ?\"))\n</code></pre>"},{"location":"instruments/rs_source/#driverlib.rhode_schwarz.rs_source.RhodeSchwarzSource.set_modulation_frequency","title":"set_modulation_frequency","text":"<pre><code>set_modulation_frequency(value)\n</code></pre> <p>Set the modulation frequency of the signal generator.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The desired modulation frequency in Hz.</p> required Source code in <code>driverlib/rhode_schwarz/rs_source.py</code> <pre><code>def set_modulation_frequency(self, value: float):\n    \"\"\"Set the modulation frequency of the signal generator.\n\n    Args:\n        value (float): The desired modulation frequency in Hz.\n    \"\"\"\n    self.write(f\"LFO1:FREQ {value}\")\n</code></pre>"},{"location":"instruments/rs_source/#driverlib.rhode_schwarz.rs_source.RhodeSchwarzSource.get_phase_modulation_state","title":"get_phase_modulation_state","text":"<pre><code>get_phase_modulation_state()\n</code></pre> <p>Query the phase modulation state of the signal generator.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if phase modulation is enabled, False otherwise.</p> Source code in <code>driverlib/rhode_schwarz/rs_source.py</code> <pre><code>def get_phase_modulation_state(self):\n    \"\"\"Query the phase modulation state of the signal generator.\n\n    Returns:\n        bool: True if phase modulation is enabled, False otherwise.\n    \"\"\"\n    return bool(int(self.ask(\"PM:STAT?\")))\n</code></pre>"},{"location":"instruments/rs_source/#driverlib.rhode_schwarz.rs_source.RhodeSchwarzSource.set_phase_modulation_state","title":"set_phase_modulation_state","text":"<pre><code>set_phase_modulation_state(value)\n</code></pre> <p>Set the phase modulation state of the signal generator.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>bool | ON | OFF | 0 | 1</code> <p>The desired phase modulation state. True to enable phase modulation, False to disable it.</p> required Source code in <code>driverlib/rhode_schwarz/rs_source.py</code> <pre><code>def set_phase_modulation_state(self, value: ONOFF_TYPE):\n    \"\"\"Set the phase modulation state of the signal generator.\n\n    Args:\n        value (bool | ON | OFF | 0 | 1): The desired phase modulation state.\n            True to enable phase modulation, False to disable it.\n    \"\"\"\n    if self._value_to_bool(value):\n        self.write(\"PM:STAT ON\")\n    else:\n        self.write(\"PM:STAT OFF\")\n</code></pre>"},{"location":"instruments/rs_source/#driverlib.rhode_schwarz.rs_source.RhodeSchwarzSource.set_amplitude_modulation_state","title":"set_amplitude_modulation_state","text":"<pre><code>set_amplitude_modulation_state(value)\n</code></pre> <p>Set the amplitude modulation state of the signal generator.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>bool | ON | OFF | 0 | 1</code> <p>The desired amplitude modulation state. True to enable amplitude modulation, False to disable it.</p> required Source code in <code>driverlib/rhode_schwarz/rs_source.py</code> <pre><code>def set_amplitude_modulation_state(self, value: ONOFF_TYPE):\n    \"\"\"Set the amplitude modulation state of the signal generator.\n\n    Args:\n        value (bool | ON | OFF | 0 | 1): The desired amplitude modulation state.\n            True to enable amplitude modulation, False to disable it.\n    \"\"\"\n    if self._value_to_bool(value):\n        self.write(\"AM:STAT ON\")\n    else:\n        self.write(\"AM:STAT OFF\")\n</code></pre>"},{"location":"instruments/rs_source/#driverlib.rhode_schwarz.rs_source.RhodeSchwarzSource.get_amplitude_modulation_state","title":"get_amplitude_modulation_state","text":"<pre><code>get_amplitude_modulation_state()\n</code></pre> <p>Query the amplitude modulation state of the signal generator.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if amplitude modulation is enabled, False otherwise.</p> Source code in <code>driverlib/rhode_schwarz/rs_source.py</code> <pre><code>def get_amplitude_modulation_state(self):\n    \"\"\"Query the amplitude modulation state of the signal generator.\n\n    Returns:\n        bool: True if amplitude modulation is enabled, False otherwise.\n    \"\"\"\n    return bool(int(self.ask(\"AM:STAT?\")))\n</code></pre>"},{"location":"instruments/rs_source/#driverlib.rhode_schwarz.rs_source.RhodeSchwarzSource.set_phase_modulation_source","title":"set_phase_modulation_source","text":"<pre><code>set_phase_modulation_source(value)\n</code></pre> <p>Set the phase modulation source of the signal generator.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Literal['INT', 'EXT']</code> <p>The desired phase modulation source. Must be either \"INT\" or \"EXT\".</p> required Source code in <code>driverlib/rhode_schwarz/rs_source.py</code> <pre><code>def set_phase_modulation_source(self, value: Literal[\"INT\", \"EXT\"]):\n    \"\"\"Set the phase modulation source of the signal generator.\n\n    Args:\n        value (Literal[\"INT\", \"EXT\"]): The desired phase modulation source.\n            Must be either \"INT\" or \"EXT\".\n    \"\"\"\n    if value not in {\"INT\", \"EXT\"}:\n        raise ValueError(\"Invalid value. Must be 'INT' or 'EXT'\")\n    self.write(f\"PM:SOUR {value}\")\n</code></pre>"},{"location":"instruments/rs_source/#driverlib.rhode_schwarz.rs_source.RhodeSchwarzSource.get_phase_modulation_source","title":"get_phase_modulation_source","text":"<pre><code>get_phase_modulation_source()\n</code></pre> <p>Query the phase modulation source of the signal generator.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The current phase modulation source. Either \"INT\" or \"EXT\".</p> Source code in <code>driverlib/rhode_schwarz/rs_source.py</code> <pre><code>def get_phase_modulation_source(self):\n    \"\"\"Query the phase modulation source of the signal generator.\n\n    Returns:\n        str: The current phase modulation source. Either \"INT\" or \"EXT\".\n    \"\"\"\n    return self.ask(\"PM:SOUR?\")\n</code></pre>"},{"location":"instruments/tektronix_afg/","title":"Tektronix AFG","text":"<p>               Bases: <code>VisaDriver</code></p> <p>A class representing a Tektronix Arbitrary Function Generator (AFG).</p> <p>Initialize the AFG object.</p> <p>Parameters:</p> Name Type Description Default <code>resource_location</code> <code>str</code> <p>The resource location of the AFG.</p> required <code>model_name</code> <code>str</code> <p>The model name of the AFG.</p> required Source code in <code>driverlib/tektronix/tektronix_afg.py</code> <pre><code>def __init__(self, resource_location: str, model_name: str):\n    \"\"\"\n    Initialize the AFG object.\n\n    Args:\n        resource_location (str): The resource location of the AFG.\n        model_name (str): The model name of the AFG.\n    \"\"\"\n    del model_name\n    super().__init__(resource_location)\n\n    self._allow_attrs = self._allow_attrs + [\"channel_idx\"]\n\n    self.channel_idx = 1\n</code></pre>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.idn","title":"idn  <code>property</code>","text":"<pre><code>idn\n</code></pre> <p>Retrieve the identification string.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The identification string of the device.</p>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.output_enabled","title":"output_enabled  <code>property</code> <code>writable</code>","text":"<pre><code>output_enabled\n</code></pre> <p>Get the output state of the AFG.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>The output state of the AFG.</p>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.am","title":"am  <code>property</code> <code>writable</code>","text":"<pre><code>am\n</code></pre> <p>Get the amplitude modulation state of the AFG.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>The amplitude modulation state of the AFG.</p>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.fm","title":"fm  <code>property</code> <code>writable</code>","text":"<pre><code>fm\n</code></pre> <p>Get the frequency modulation state of the AFG.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>The frequency modulation state of the AFG.</p>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.pm","title":"pm  <code>property</code> <code>writable</code>","text":"<pre><code>pm\n</code></pre> <p>Get the phase modulation state of the AFG.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>The phase modulation state of the AFG.</p>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.pwm","title":"pwm  <code>property</code> <code>writable</code>","text":"<pre><code>pwm\n</code></pre> <p>Get the pulse width modulation state of the AFG.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>The pulse width modulation state of the AFG.</p>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.waveform","title":"waveform  <code>property</code> <code>writable</code>","text":"<pre><code>waveform\n</code></pre> <p>Get the waveform shape of the AFG.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The waveform shape of the AFG.</p>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.duty_cycle_high","title":"duty_cycle_high  <code>property</code> <code>writable</code>","text":"<pre><code>duty_cycle_high\n</code></pre> <p>Get the duty cycle high value of the AFG.</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The duty cycle high value of the AFG.</p>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.impedance","title":"impedance  <code>property</code> <code>writable</code>","text":"<pre><code>impedance\n</code></pre> <p>Get the output impedance of the AFG.</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The output impedance of the AFG.</p>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.polarity","title":"polarity  <code>property</code> <code>writable</code>","text":"<pre><code>polarity\n</code></pre> <p>Get the output polarity of the AFG.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The output polarity of the AFG.</p>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.trigger_out_mode","title":"trigger_out_mode  <code>property</code> <code>writable</code>","text":"<pre><code>trigger_out_mode\n</code></pre> <p>Get the trigger output mode of the AFG.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The trigger output mode of the AFG.</p>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.ref_oscillator","title":"ref_oscillator  <code>property</code> <code>writable</code>","text":"<pre><code>ref_oscillator\n</code></pre> <p>Get the reference oscillator source of the AFG.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The reference oscillator source of the AFG.</p>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.amplitude_lock","title":"amplitude_lock  <code>property</code> <code>writable</code>","text":"<pre><code>amplitude_lock\n</code></pre> <p>Check if the voltages of both channels are locked to each other.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the voltages of both channels are locked, False otherwise.</p>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.frequency_lock","title":"frequency_lock  <code>property</code> <code>writable</code>","text":"<pre><code>frequency_lock\n</code></pre> <p>Check if the frequencies of both channels are locked to each other.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the frequencies of both channels are locked, False otherwise.</p>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.amplitude","title":"amplitude  <code>property</code> <code>writable</code>","text":"<pre><code>amplitude\n</code></pre> <p>Get the signal amplitude in Vpp.</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The signal amplitude in Vpp.</p>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.frequency","title":"frequency  <code>property</code> <code>writable</code>","text":"<pre><code>frequency\n</code></pre> <p>Get the frequency of the AFG.</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The frequency of the AFG.</p>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.phase","title":"phase  <code>property</code> <code>writable</code>","text":"<pre><code>phase\n</code></pre> <p>Get or set the phase in degrees.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The phase to set in degrees. Defaults to 0.</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The phase in degrees.</p>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.offset","title":"offset  <code>property</code> <code>writable</code>","text":"<pre><code>offset\n</code></pre> <p>Get or set the offset.</p> <p>Parameters:</p> Name Type Description Default <code>val</code> <code>float</code> <p>The offset to set. Defaults to 0.</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The offset.</p>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.high","title":"high  <code>property</code> <code>writable</code>","text":"<pre><code>high\n</code></pre> <p>Get or set the high value for voltage.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The high value for voltage to set. Defaults to 0.</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The high value for voltage.</p>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.low","title":"low  <code>property</code> <code>writable</code>","text":"<pre><code>low\n</code></pre> <p>Get or set the low value for voltage.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The low value for voltage to set. Defaults to 0.</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The low value for voltage.</p>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.trigger_source","title":"trigger_source  <code>property</code> <code>writable</code>","text":"<pre><code>trigger_source\n</code></pre> <p>Get or set the trigger source of the AFG.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The trigger source of the AFG.</p>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.trigger_slope","title":"trigger_slope  <code>property</code> <code>writable</code>","text":"<pre><code>trigger_slope\n</code></pre> <p>Get or set the trigger slope of the AFG.</p> <p>Parameters:</p> Name Type Description Default <code>val</code> <code>str</code> <p>The trigger slope to set. Defaults to \"POS\".</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The trigger slope of the AFG.</p>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.trigger_timer","title":"trigger_timer  <code>property</code> <code>writable</code>","text":"<pre><code>trigger_timer\n</code></pre> <p>Get or set the trigger timer of the AFG.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The trigger timer to set. Defaults to 1.</p> required <p>Returns:     float: The trigger timer of the AFG.</p>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.burst_enabled","title":"burst_enabled  <code>property</code> <code>writable</code>","text":"<pre><code>burst_enabled\n</code></pre> <p>Get or set the burst mode state of the AFG.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>If burst mode is enabled.</p>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.burst_cycles","title":"burst_cycles  <code>property</code> <code>writable</code>","text":"<pre><code>burst_cycles\n</code></pre> <p>Get or set the number of burst cycles of the AFG.</p>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.burst_delay","title":"burst_delay  <code>property</code> <code>writable</code>","text":"<pre><code>burst_delay\n</code></pre> <p>Get or set the burst delay of the AFG.</p>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.burst_mode","title":"burst_mode  <code>property</code> <code>writable</code>","text":"<pre><code>burst_mode\n</code></pre> <p>Get or set the burst mode of the AFG.</p>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Close the connection to the device.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def close(self):\n    \"\"\"Close the connection to the device.\"\"\"\n    self.rm.close()\n</code></pre>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.get_error","title":"get_error","text":"<pre><code>get_error()\n</code></pre> <p>Retrieve the error message from the device.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The error message.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def get_error(self):\n    \"\"\"Retrieve the error message from the device.\n\n    Returns:\n        str: The error message.\n    \"\"\"\n    return self.ask(\"SYST:ERR?\")\n</code></pre>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.print_error","title":"print_error","text":"<pre><code>print_error()\n</code></pre> <p>Print eventual errors occurred.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def print_error(self):\n    \"\"\"Print eventual errors occurred.\"\"\"\n    print(f\"Errors: {self.get_error()}\", end=\"\")\n</code></pre>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.reset","title":"reset","text":"<pre><code>reset()\n</code></pre> <p>Reset instrument to factory default state. Does not clear volatile memory.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def reset(self):\n    \"\"\"Reset instrument to factory default state. Does not clear volatile memory.\"\"\"\n    self.write(\"*RST\")\n    self.write(\"*WAI\")\n</code></pre>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.clear","title":"clear","text":"<pre><code>clear()\n</code></pre> <p>Clear event register, error queue -when power is cycled-.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def clear(self):\n    \"\"\"Clear event register, error queue -when power is cycled-.\"\"\"\n    self.write(\"*CLS\")\n    self.write(\"*WAI\")\n</code></pre>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.lookup_resources","title":"lookup_resources","text":"<pre><code>lookup_resources()\n</code></pre> <p>Look for all the available resources.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def lookup_resources(self):\n    \"\"\"Look for all the available resources.\"\"\"\n    instruments = self.rm.list_resources()\n    print(f\"Found {len(instruments)} instruments:\")\n    for location in instruments:\n        try:\n            with OpenResource(self.rm, location, self.endline) as instr:\n                idn = instr.query(\"*IDN?\")\n        except VisaIOError:\n            idn = None\n\n        print(f\"Resource named: {idn if idn else 'Unable to determine'} @ '{location}'\")\n</code></pre>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.recall","title":"recall","text":"<pre><code>recall(num='1')\n</code></pre> <p>Recall a saved configuration on the AFG.</p> <p>Parameters:</p> Name Type Description Default <code>num</code> <code>str</code> <p>The number of the saved configuration. Defaults to \"1\".</p> <code>'1'</code> Source code in <code>driverlib/tektronix/tektronix_afg.py</code> <pre><code>def recall(self, num: str = \"1\") -&gt; None:\n    \"\"\"\n    Recall a saved configuration on the AFG.\n\n    Args:\n        num (str, optional): The number of the saved configuration. Defaults to \"1\".\n    \"\"\"\n    self.write(f\"*RCL {num}\")\n</code></pre>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.save","title":"save","text":"<pre><code>save(num='1')\n</code></pre> <p>Save the current configuration on the AFG.</p> <p>Parameters:</p> Name Type Description Default <code>num</code> <code>str</code> <p>The number to save the configuration as. Defaults to \"1\".</p> <code>'1'</code> Source code in <code>driverlib/tektronix/tektronix_afg.py</code> <pre><code>def save(self, num: str = \"1\") -&gt; None:\n    \"\"\"\n    Save the current configuration on the AFG.\n\n    Args:\n        num (str, optional): The number to save the configuration as. Defaults to \"1\".\n    \"\"\"\n    self.write(f\"*SAV {num}\")\n</code></pre>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.calibrate","title":"calibrate","text":"<pre><code>calibrate()\n</code></pre> <p>Perform calibration on the AFG.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if calibration is successful, False otherwise.</p> Source code in <code>driverlib/tektronix/tektronix_afg.py</code> <pre><code>def calibrate(self) -&gt; bool:\n    \"\"\"\n    Perform calibration on the AFG.\n\n    Returns:\n        bool: True if calibration is successful, False otherwise.\n    \"\"\"\n    return int(self.ask(\"*CAL?\")) == 0\n</code></pre>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.phase_initiate","title":"phase_initiate","text":"<pre><code>phase_initiate()\n</code></pre> <p>Initialize the phase of the AFG.</p> Source code in <code>driverlib/tektronix/tektronix_afg.py</code> <pre><code>def phase_initiate(self) -&gt; None:\n    \"\"\"\n    Initialize the phase of the AFG.\n    \"\"\"\n    self.write(f\"SOURce{self.channel_idx}:PHASe:INITiate\")\n</code></pre>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.trigger","title":"trigger","text":"<pre><code>trigger()\n</code></pre> <p>Trigger the measurement.</p> Source code in <code>driverlib/tektronix/tektronix_afg.py</code> <pre><code>def trigger(self) -&gt; None:\n    \"\"\"Trigger the measurement.\"\"\"\n    self.write(\"TRIGger:SEQuence:IMMediate\")\n</code></pre>"},{"location":"instruments/tektronix_afg/#driverlib.tektronix.tektronix_afg.TektronixAFG.sweep","title":"sweep","text":"<pre><code>sweep(start_freq, stop_freq, sweep_time)\n</code></pre> <p>Perform a frequency sweep on the AFG.</p> <p>Parameters:</p> Name Type Description Default <code>start_freq</code> <code>float</code> <p>The starting frequency of the sweep.</p> required <code>stop_freq</code> <code>float</code> <p>The stopping frequency of the sweep.</p> required <code>sweep_time</code> <code>float</code> <p>The duration of the sweep in seconds.</p> required Source code in <code>driverlib/tektronix/tektronix_afg.py</code> <pre><code>def sweep(self, start_freq: float, stop_freq: float, sweep_time: float) -&gt; None:\n    \"\"\"Perform a frequency sweep on the AFG.\n\n    Args:\n        start_freq (float): The starting frequency of the sweep.\n        stop_freq (float): The stopping frequency of the sweep.\n        sweep_time (float): The duration of the sweep in seconds.\n    \"\"\"\n\n    self.write(f\"SOURce{self.channel_idx}:FREQuency:STARt {start_freq:f}Hz\")\n    self.write(f\"SOURce{self.channel_idx}:FREQuency:STOP {stop_freq:f}Hz\")\n    self.write(f\"SOURce{self.channel_idx}:SWEep:TIME {sweep_time:f}s\")\n    self.write(f\"SOURce{self.channel_idx}:SWEep:MODE AUTO\")\n    self.write(f\"SOURce{self.channel_idx}:SWEep:STATe ON\")\n</code></pre>"},{"location":"instruments/yokogawa_gs200/","title":"Yokogawa GS200","text":"<p>               Bases: <code>VisaDriver</code></p> <p>A driver for controlling the Yokogawa GS200 source measure unit via VISA interface.</p> <p>This class provides an interface to control and query the Yokogawa GS200, including setting its operation mode, output state, output range, and output level. The device can operate in either current or voltage mode.</p>"},{"location":"instruments/yokogawa_gs200/#driverlib.yokogawa.yokogawa_gs200.YokogawaGS200--usage","title":"Usage:","text":"<pre><code>from driverlib.yokogawa import YokogawaGS200\n\nyoko = YokogawaGS200(\"address\")\n\nyoko.output = True\nyoko.voltage = 1.0\n</code></pre> <p>Initialize the YokogawaGS200 object with the specified resource location and mode.</p> <p>Parameters:</p> Name Type Description Default <code>resource_location</code> <code>str</code> <p>The VISA resource name used to connect to the device.</p> required <code>mode</code> <code>Literal['current', 'voltage']</code> <p>The initial operation mode of the GS200. Defaults to 'voltage'.</p> <code>'voltage'</code> <code>max_level</code> <code>Optional[float]</code> <p>The maximum voltage/current value. Defaults to None.</p> <code>None</code> <code>min_level</code> <code>Optional[float]</code> <p>The minimum voltage/current value. Defaults to None.</p> <code>None</code> Source code in <code>driverlib/yokogawa/yokogawa_gs200.py</code> <pre><code>def __init__(\n    self,\n    resource_location: str,\n    mode: Literal[\"current\", \"voltage\"] = \"voltage\",\n    max_level: Optional[float] = None,\n    min_level: Optional[float] = None,\n):\n    \"\"\"Initialize the YokogawaGS200 object with the specified resource location and mode.\n\n    Args:\n        resource_location (str): The VISA resource name used to connect to the device.\n        mode (Literal[\"current\", \"voltage\"], optional): The initial operation mode of the GS200.\n            Defaults to 'voltage'.\n        max_level (Optional[float], optional): The maximum voltage/current value. Defaults to None.\n        min_level (Optional[float], optional): The minimum voltage/current value. Defaults to None.\n    \"\"\"\n    super().__init__(resource_location=resource_location)\n    self.mode = mode\n    self.set_limits(min_level, max_level)\n</code></pre>"},{"location":"instruments/yokogawa_gs200/#driverlib.yokogawa.yokogawa_gs200.YokogawaGS200.idn","title":"idn  <code>property</code>","text":"<pre><code>idn\n</code></pre> <p>Retrieve the identification string.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The identification string of the device.</p>"},{"location":"instruments/yokogawa_gs200/#driverlib.yokogawa.yokogawa_gs200.YokogawaGS200.min_level","title":"min_level  <code>property</code> <code>writable</code>","text":"<pre><code>min_level\n</code></pre> <p>Get or set the minimum voltage/current value.</p>"},{"location":"instruments/yokogawa_gs200/#driverlib.yokogawa.yokogawa_gs200.YokogawaGS200.max_level","title":"max_level  <code>property</code> <code>writable</code>","text":"<pre><code>max_level\n</code></pre> <p>Get or set the maximum voltage value.</p>"},{"location":"instruments/yokogawa_gs200/#driverlib.yokogawa.yokogawa_gs200.YokogawaGS200.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Close the connection to the device.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def close(self):\n    \"\"\"Close the connection to the device.\"\"\"\n    self.rm.close()\n</code></pre>"},{"location":"instruments/yokogawa_gs200/#driverlib.yokogawa.yokogawa_gs200.YokogawaGS200.get_error","title":"get_error","text":"<pre><code>get_error()\n</code></pre> <p>Retrieve the error message from the device.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The error message.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def get_error(self):\n    \"\"\"Retrieve the error message from the device.\n\n    Returns:\n        str: The error message.\n    \"\"\"\n    return self.ask(\"SYST:ERR?\")\n</code></pre>"},{"location":"instruments/yokogawa_gs200/#driverlib.yokogawa.yokogawa_gs200.YokogawaGS200.print_error","title":"print_error","text":"<pre><code>print_error()\n</code></pre> <p>Print eventual errors occurred.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def print_error(self):\n    \"\"\"Print eventual errors occurred.\"\"\"\n    print(f\"Errors: {self.get_error()}\", end=\"\")\n</code></pre>"},{"location":"instruments/yokogawa_gs200/#driverlib.yokogawa.yokogawa_gs200.YokogawaGS200.reset","title":"reset","text":"<pre><code>reset()\n</code></pre> <p>Reset instrument to factory default state. Does not clear volatile memory.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def reset(self):\n    \"\"\"Reset instrument to factory default state. Does not clear volatile memory.\"\"\"\n    self.write(\"*RST\")\n    self.write(\"*WAI\")\n</code></pre>"},{"location":"instruments/yokogawa_gs200/#driverlib.yokogawa.yokogawa_gs200.YokogawaGS200.clear","title":"clear","text":"<pre><code>clear()\n</code></pre> <p>Clear event register, error queue -when power is cycled-.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def clear(self):\n    \"\"\"Clear event register, error queue -when power is cycled-.\"\"\"\n    self.write(\"*CLS\")\n    self.write(\"*WAI\")\n</code></pre>"},{"location":"instruments/yokogawa_gs200/#driverlib.yokogawa.yokogawa_gs200.YokogawaGS200.lookup_resources","title":"lookup_resources","text":"<pre><code>lookup_resources()\n</code></pre> <p>Look for all the available resources.</p> Source code in <code>driverlib/visa_driver.py</code> <pre><code>def lookup_resources(self):\n    \"\"\"Look for all the available resources.\"\"\"\n    instruments = self.rm.list_resources()\n    print(f\"Found {len(instruments)} instruments:\")\n    for location in instruments:\n        try:\n            with OpenResource(self.rm, location, self.endline) as instr:\n                idn = instr.query(\"*IDN?\")\n        except VisaIOError:\n            idn = None\n\n        print(f\"Resource named: {idn if idn else 'Unable to determine'} @ '{location}'\")\n</code></pre>"},{"location":"instruments/yokogawa_gs200/#driverlib.yokogawa.yokogawa_gs200.YokogawaGS200.set_limits","title":"set_limits","text":"<pre><code>set_limits(min_level, max_level)\n</code></pre> <p>Set the minimum and maximum voltage/current values.</p> Source code in <code>driverlib/yokogawa/yokogawa_gs200.py</code> <pre><code>def set_limits(self, min_level: Optional[float], max_level: Optional[float]):\n    \"\"\"Set the minimum and maximum voltage/current values.\"\"\"\n    self._min_level = min_level\n    self._max_level = max_level\n</code></pre>"},{"location":"instruments/yokogawa_gs200/#driverlib.yokogawa.yokogawa_gs200.YokogawaGS200.get_output","title":"get_output","text":"<pre><code>get_output()\n</code></pre> <p>Query the output state of the Yokogawa GS200.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the output is on, False otherwise.</p> Source code in <code>driverlib/yokogawa/yokogawa_gs200.py</code> <pre><code>def get_output(self) -&gt; bool:\n    \"\"\"Query the output state of the Yokogawa GS200.\n\n    Returns:\n        bool: True if the output is on, False otherwise.\n    \"\"\"\n    return self.ask(\"OUTPUT?\").strip() == \"1\"\n</code></pre>"},{"location":"instruments/yokogawa_gs200/#driverlib.yokogawa.yokogawa_gs200.YokogawaGS200.set_output","title":"set_output","text":"<pre><code>set_output(value)\n</code></pre> <p>Set the output state of the Yokogawa GS200.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>ONOFF_TYPE</code> <p>The desired output state. True to turn on the output, False to turn it off.</p> required Source code in <code>driverlib/yokogawa/yokogawa_gs200.py</code> <pre><code>def set_output(self, value: ONOFF_TYPE):\n    \"\"\"Set the output state of the Yokogawa GS200.\n\n    Args:\n        value (ONOFF_TYPE): The desired output state. True to turn on the output, False to turn it off.\n    \"\"\"\n    if self._value_to_bool(value):\n        self.write(\"OUTPUT ON\")\n    else:\n        self.write(\"OUTPUT OFF\")\n</code></pre>"},{"location":"instruments/yokogawa_gs200/#driverlib.yokogawa.yokogawa_gs200.YokogawaGS200.get_range","title":"get_range","text":"<pre><code>get_range()\n</code></pre> <p>Query the output range of the Yokogawa GS200.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>float</code> <p>The current output range setting of the device.</p> Source code in <code>driverlib/yokogawa/yokogawa_gs200.py</code> <pre><code>def get_range(self) -&gt; float:\n    \"\"\"Query the output range of the Yokogawa GS200.\n\n    Returns:\n        int: The current output range setting of the device.\n    \"\"\"\n    return float(self.ask(\":SOURce:RANGe?\").strip())\n</code></pre>"},{"location":"instruments/yokogawa_gs200/#driverlib.yokogawa.yokogawa_gs200.YokogawaGS200.set_range","title":"set_range","text":"<pre><code>set_range(value)\n</code></pre> <p>Set the output range of the Yokogawa GS200.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The desired output range.</p> required Source code in <code>driverlib/yokogawa/yokogawa_gs200.py</code> <pre><code>def set_range(self, value: float):\n    \"\"\"Set the output range of the Yokogawa GS200.\n\n    Args:\n        value (float): The desired output range.\n    \"\"\"\n    self.write(f\":SOURce:RANGe {value:.4f}\")\n</code></pre>"},{"location":"instruments/yokogawa_gs200/#driverlib.yokogawa.yokogawa_gs200.YokogawaGS200.set_level","title":"set_level","text":"<pre><code>set_level(value, check_mode=None)\n</code></pre> <p>Set the output level of the Yokogawa GS200.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The desired output level.</p> required Source code in <code>driverlib/yokogawa/yokogawa_gs200.py</code> <pre><code>def set_level(self, value: float, check_mode: Optional[str] = None):\n    \"\"\"Set the output level of the Yokogawa GS200.\n\n    Args:\n        value (float): The desired output level.\n    \"\"\"\n    if check_mode is not None and self.mode != check_mode:\n        raise TypeError(\n            f\"Yoko is configured in {self.mode} mode, while it should be {check_mode}\"\n        )\n    if self.max_level is not None and value &gt; self.max_level:\n        raise ValueError(f\"Level value {value} is greater than the maximum allowed value\")\n    if self.min_level is not None and value &lt; self.min_level:\n        raise ValueError(f\"Level value {value} is smaller than the minimum allowed value\")\n\n    self.write(f\":SOURce:Level {value:.8f}\")\n</code></pre>"},{"location":"instruments/yokogawa_gs200/#driverlib.yokogawa.yokogawa_gs200.YokogawaGS200.get_level","title":"get_level","text":"<pre><code>get_level(check_mode=None)\n</code></pre> <p>Query the output level of the Yokogawa GS200.</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The current output level of the device.</p> Source code in <code>driverlib/yokogawa/yokogawa_gs200.py</code> <pre><code>def get_level(self, check_mode: Optional[str] = None) -&gt; float:\n    \"\"\"Query the output level of the Yokogawa GS200.\n\n    Returns:\n        float: The current output level of the device.\n    \"\"\"\n    if check_mode is not None and self.mode != check_mode:\n        raise TypeError(\n            f\"Yoko is configured in {self.mode} mode, while it should be {check_mode}\"\n        )\n    return float(self.ask(\":SOURce:Level?\"))\n</code></pre>"},{"location":"instruments/yokogawa_gs200/#driverlib.yokogawa.yokogawa_gs200.YokogawaGS200.get_voltage","title":"get_voltage","text":"<pre><code>get_voltage()\n</code></pre> <p>Get the output voltage level.</p> Source code in <code>driverlib/yokogawa/yokogawa_gs200.py</code> <pre><code>def get_voltage(self):\n    \"\"\"Get the output voltage level.\"\"\"\n    return self.get_level(\"voltage\")\n</code></pre>"},{"location":"instruments/yokogawa_gs200/#driverlib.yokogawa.yokogawa_gs200.YokogawaGS200.set_voltage","title":"set_voltage","text":"<pre><code>set_voltage(value)\n</code></pre> <p>Set the output voltage level.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The desired output voltage level.</p> required Source code in <code>driverlib/yokogawa/yokogawa_gs200.py</code> <pre><code>def set_voltage(self, value):\n    \"\"\"Set the output voltage level.\n\n    Args:\n        value (float): The desired output voltage level.\n    \"\"\"\n    return self.set_level(value, \"voltage\")\n</code></pre>"},{"location":"instruments/yokogawa_gs200/#driverlib.yokogawa.yokogawa_gs200.YokogawaGS200.get_current","title":"get_current","text":"<pre><code>get_current()\n</code></pre> <p>Get the output current level.</p> Source code in <code>driverlib/yokogawa/yokogawa_gs200.py</code> <pre><code>def get_current(self):\n    \"\"\"Get the output current level.\"\"\"\n    return self.get_level(\"current\")\n</code></pre>"},{"location":"instruments/yokogawa_gs200/#driverlib.yokogawa.yokogawa_gs200.YokogawaGS200.set_current","title":"set_current","text":"<pre><code>set_current(value)\n</code></pre> <p>Set the output current level.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The desired output current level.</p> required Source code in <code>driverlib/yokogawa/yokogawa_gs200.py</code> <pre><code>def set_current(self, value):\n    \"\"\"Set the output current level.\n\n    Args:\n        value (float): The desired output current level.\n    \"\"\"\n    return self.set_level(value, \"current\")\n</code></pre>"},{"location":"instruments/yokogawa_gs200/#driverlib.yokogawa.yokogawa_gs200.YokogawaGS200.set_voltage_safely","title":"set_voltage_safely","text":"<pre><code>set_voltage_safely(value, step=None)\n</code></pre> <p>Set the output voltage level safely.</p> <p>This method gradually changes the output voltage level from the current level to the desired level with a specified step size.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The desired output voltage level.</p> required <code>step</code> <code>float</code> <p>The step size for changing the voltage level. Defaults to self.default_safety_step.</p> <code>None</code> Source code in <code>driverlib/yokogawa/yokogawa_gs200.py</code> <pre><code>def set_voltage_safely(self, value: float, step: Optional[float] = None):\n    \"\"\"Set the output voltage level safely.\n\n    This method gradually changes the output voltage level from the current level to the desired level\n    with a specified step size.\n\n    Args:\n        value (float): The desired output voltage level.\n        step (float, optional): The step size for changing the voltage level.\n            Defaults to self.default_safety_step.\n    \"\"\"\n    if not self.output:\n        raise ValueError(\"The output must be on\")\n\n    if step is None:\n        step = self.default_safety_step\n\n    initial_voltage = self.voltage\n    if np.round(value, self._precision) == np.round(initial_voltage, self._precision):\n        return\n\n    step = abs(step) if initial_voltage &lt; value else -abs(step)\n\n    for v in np.arange(initial_voltage, value + step / 2, step):\n        self.set_voltage(np.round(v, self._precision))\n        time.sleep(0.2)\n    return\n</code></pre>"},{"location":"instruments/yokogawa_gs200/#driverlib.yokogawa.yokogawa_gs200.YokogawaGS200.set_output_safely","title":"set_output_safely","text":"<pre><code>set_output_safely(value)\n</code></pre> <p>Set the output state safely.</p> <p>This method sets the voltage to 0 before setting the output to True.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>ONOFF_TYPE</code> <p>The desired output state. True to turn on the output, False to turn it off.</p> required Source code in <code>driverlib/yokogawa/yokogawa_gs200.py</code> <pre><code>def set_output_safely(self, value: ONOFF_TYPE):\n    \"\"\"Set the output state safely.\n\n    This method sets the voltage to 0 before setting the output to True.\n\n    Args:\n        value (ONOFF_TYPE): The desired output state. True to turn on the output, False to turn it off.\n    \"\"\"\n    if self._value_to_bool(value):\n        self.voltage = 0\n        self.output = True\n    else:\n        self.output = False\n</code></pre>"},{"location":"instruments/yokogawa_gs200/#driverlib.yokogawa.yokogawa_gs200.YokogawaGS200.set_output_voltage_safely","title":"set_output_voltage_safely","text":"<pre><code>set_output_voltage_safely(value, step=None)\n</code></pre> <p>Set the output voltage level safely.</p> <p>This method sets the output state to True and then gradually changes the output voltage level from the current level to the desired level with a specified step size.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The desired output voltage level.</p> required <code>step</code> <code>float</code> <p>The step size for changing the voltage level. Defaults to None.</p> <code>None</code> Source code in <code>driverlib/yokogawa/yokogawa_gs200.py</code> <pre><code>def set_output_voltage_safely(self, value: float, step: Optional[float] = None):\n    \"\"\"Set the output voltage level safely.\n\n    This method sets the output state to True and then gradually changes the output voltage level\n    from the current level to the desired level with a specified step size.\n\n    Args:\n        value (float): The desired output voltage level.\n        step (float, optional): The step size for changing the voltage level. Defaults to None.\n    \"\"\"\n    self.set_output_safely(True)\n    self.set_voltage_safely(value, step)\n</code></pre>"},{"location":"releases/","title":"Index","text":"<p>Current edition is in beta version.</p>"},{"location":"starting_guide/first_steps/","title":"Getting Started with <code>DriverLib</code>","text":"<p>Make sure you have installed the package before.</p>"},{"location":"starting_guide/first_steps/#find-your-instrument","title":"Find your instrument","text":""},{"location":"starting_guide/first_steps/#load-your-instrument","title":"Load your instrument","text":""},{"location":"starting_guide/first_steps/#further-details","title":"Further Details","text":""},{"location":"starting_guide/install/","title":"Installation DriverLib","text":"<p>You can install the <code>driverlib</code> library using either pip or by pulling the repository directly from GitHub.</p>"},{"location":"starting_guide/install/#option-1-install-via-pip","title":"Option 1: Install via Pip","text":"<p>Open your terminal and run the following command</p> <pre><code>pip install driverlib\n</code></pre>"},{"location":"starting_guide/install/#option-2-install-from-github","title":"Option 2: Install from GitHub","text":"<p>You can also install <code>driverlib</code> directly from its GitHub repository. This option is useful if you want to work with the latest development version or if you need to customize the library. Here's how to do it:</p> <ol> <li>Clone the <code>driverlib</code> repository from GitHub using the following command:</li> </ol> <pre><code>git clone https://github.com/kyrylo-gr/driverlib.git\n</code></pre> <ol> <li>Enter the directory and install the package.</li> </ol> <pre><code>cd driverlib\npip install -e .\n</code></pre> <p><code>-e</code> allows you to link the library to the directory that you created, therefore allows you to change the code inside this directory. Instead <code>pip install -e .</code> you can run <code>python setup.py develop</code> if you prefer.</p>"},{"location":"starting_guide/install/#thats-it","title":"That's it!","text":"<p>You've successfully installed the <code>driverlib</code> library. You can now start incorporating <code>driverlib</code> into your Python projects.</p> <p>For further insight, please refer to the First Steps guide.</p>"}]}